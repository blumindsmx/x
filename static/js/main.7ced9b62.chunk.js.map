{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","texto","code","address","lat","lng","proc","reg","archivos","status","terminales","ckdn","kmk","kdmk","frkem","abrir","bind","assertThisInitialized","listenInput","e","setState","target","value","toUpperCase","este","axios","get","then","response","alert","newData","concat","toConsumableArray","data","ter","console","log","localStorage","setItem","catch","error","getItem","_this2","react_default","a","createElement","className","style","color","fontSize","display","width","margin","textAlign","justifyContent","textTransform","type","onChange","event","onClick","map","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7ced9b62.chunk.js","sourcesContent":["import React , {Component} from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      texto:'',\n      code:'',\n      address:'',\n      lat:'',\n      lng:'',\n      proc:0,\n      reg:0,\n      archivos:'',\n      status:false,\n      terminales:[\n        {\n          ckdn:'dmk ',\n          kmk:' kmk',kdmk:'fe',frkem:'eef'\n        }\n      ]\n\n    }\n    \n  \n \n    this.abrir=this.abrir.bind(this);\n this.listenInput =this.listenInput.bind(this);\n   \n  }\n\n\n\n  \nlistenInput(e){\n  this.setState({code:e.target.value.toUpperCase()})\n}\n\n\n\nabrir(){\n  let este = this;\n  \n        if(this.state.code!==''){\n          axios.get('https://api.blueminds.com.mx/terminal/'+este.state.code, {\n            \n          })\n          .then(function (response) {\n            if(response.status===200){\n              alert('terminal '+este.state.code+' Añadida')\n              let { terminales } = este.state;\n              let newData = [...terminales,{code : response.data.ter[0].code,\n                address  : response.data.ter[0].address,\n                lat : response.data.ter[0].lat,\n                lng:   response.data.ter[0].lng \n      }\n    ]\n    este.setState({ terminales : newData });\n              console.log(response.data.ter[0])\n              console.log(este.state.terminales);\n           localStorage.setItem('terminal',este.state.terminales)   \n            }\n            \n            \n          })\n          .catch(function (error) {\n            \n          })\n        }else{\n          alert(\"Llene Todos Los Campos\")\n        }\n}\n\n\n\nactualizaterm(){\n\n  console.log(localStorage.getItem('terminal'))\n  \n  /*)\n  const vector =\n  if(vector!==null){\n    vector.map((code) =>\n  \n    {\n  \n      let { terminales } = este.state;\n                let newData = [\n                ...terminales,\n                {\n          code : code.code,\n          address  : code.address,\n          lat : code.lat,\n          lng:   code.lng \n        }\n      ]\n      este.setState({ terminales : newData });\n    }\n  \n  \n  )\n  }\n  \n  console.log(localStorage.getItem('terminal'));*/\n}\n   \n\n\n\n  render(){\n  return (\n    <div className=\"App\">\n      <p style={{color:'#ffff',fontSize:20}}>Terminales Puebla</p>\n      <p style={{color:'#ffff',fontSize:20}}>Terminales Registradas: 13 329 </p>\n      <div style={{display:'flex',width:'100%',margin:'auto',textAlign:'center',justifyContent:'center'}}>\n        <input style={{textTransform:\"uppercase\"}} type='text' value={this.state.code} onChange={(event)=>this.listenInput(event)}></input>\n        <li className='botonan' onClick={()=>this.abrir()}>Añadir</li>\n      </div>\n      <p style={{color:'#ffff',fontSize:20}}>Terminales Guardadas</p>\n      {\n        \n        this.state.terminales.map((code) =>\n  \n  <li className='Item'>\n    <p>{code.code}</p>\n   <p>{code.address}</p>\n  <a href={'https://maps.google.com/?q='+code.lat+','+code.lng}>ver Mapa</a>\n  \n  </li>\n\n\n)}\n\n     \n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}